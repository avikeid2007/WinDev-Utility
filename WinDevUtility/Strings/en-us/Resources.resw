<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppDisplayName" xml:space="preserve">
    <value>WinDevUtility</value>
    <comment>Application display name</comment>
  </data>
  <data name="AppDescription" xml:space="preserve">
    <value>WinDevUtility</value>
    <comment>Application description</comment>
  </data>
  <data name="Shell_Main.Content" xml:space="preserve">
    <value>Main</value>
    <comment>Navigation view item name for Main</comment>
  </data>
  <data name="ExceptionSettingsStorageExtensionsFileNameIsNullOrEmpty" xml:space="preserve">
    <value>File name is null or empty. Specify a valid file name</value>
    <comment>File name is null or empty to save file in settings storage extensions</comment>
  </data>
  <data name="Settings_Theme.Text" xml:space="preserve">
    <value>Choose Theme</value>
    <comment>Choose theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Dark.Content" xml:space="preserve">
    <value>Dark</value>
    <comment>Dark theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Default.Content" xml:space="preserve">
    <value>Windows default</value>
    <comment>Windows default theme text for Settings</comment>
  </data>
  <data name="Settings_Theme_Light.Content" xml:space="preserve">
    <value>Light</value>
    <comment>Light theme text for Settings</comment>
  </data>
  <data name="Settings_About.Text" xml:space="preserve">
    <value>About this application</value>
    <comment>About this application title for Settings</comment>
  </data>
  <data name="Settings_AboutDescription.Text" xml:space="preserve">
    <value>WinDEV Utility is an open-source and free utility for improving productivity during Windows-base development. WinDev Utility is a set of utilities for C# full property included property change events, Mvvm Commands( i.e. ICommands, RelayCommand, DelegateCommand, and AsyncCommand) and XAML generation as you’re likely to get without having to pay for one. It provides equally flexible while the generation of code and XAML.</value>
    <comment>About this application description for Settings</comment>
  </data>
  <data name="Settings_PrivacyTermsLink.Content" xml:space="preserve">
    <value>Github Repository</value>
    <comment>Privacy Statement link content for Settings</comment>
  </data>
  <data name="Settings_PrivacyTermsLink.NavigateUri" xml:space="preserve">
    <value>https://github.com/avikeid2007/WinDev-Utility</value>
    <comment>Here is your Privacy Statement url for Settings</comment>
  </data>
  <data name="Settings_Personalization.Text" xml:space="preserve">
    <value>Personalization</value>
    <comment>Personalization text for Settings</comment>
  </data>
  <data name="ExceptionEnumToBooleanConverterValueMustBeAnEnum" xml:space="preserve">
    <value>value must be an Enum!</value>
    <comment>Value must be an Enum in enum to boolean converter</comment>
  </data>
  <data name="ExceptionEnumToBooleanConverterParameterMustBeAnEnumName" xml:space="preserve">
    <value>parameter must be an Enum name!</value>
    <comment>Parameter must be an Enum name in enum to boolean converter</comment>
  </data>
  <data name="FirstRun_Body.Text" xml:space="preserve">
    <value>If you are a Windows Developer or Xamarin Developer, you spent a lot of time for generation POCOs, XAML, GUIDs, and Commands within development time. For generating those kinds of redundant code, here is the all in one solution(WinDEV Utility) that will surely saves a lot of time and energy in the long run.  WinDEV Utility is an open-source and free utility for improving productivity during Windows-base development. WinDev Utility is a set of utilities for C# full property included property change events, Mvvm Commands( i.e. ICommands, RelayCommand, DelegateCommand, and AsyncCommand) and XAML generation as you’re likely to get without having to pay for one. It provides equally flexible while the generation of code and XAML.</value>
    <comment>First use prompt message body</comment>
  </data>
  <data name="FirstRunDialog.Title" xml:space="preserve">
    <value>Welcome</value>
    <comment>First use prompt message title</comment>
  </data>
  <data name="FirstRunDialog.PrimaryButtonText" xml:space="preserve">
    <value>Ok</value>
    <comment>First use prompt message primary button text</comment>
  </data>
  <data name="DialogAuthenticationTitle" xml:space="preserve">
    <value>Application Authentication</value>
  </data>
  <data name="DialogNoNetworkAvailableContent" xml:space="preserve">
    <value>ApplicatioThere is no internet connection, please connect to the internet and try again.</value>
  </data>
  <data name="DialogStatusUnknownErrorContent" xml:space="preserve">
    <value>Something went wrong during the login, please try again.</value>
  </data>
  <data name="Settings_User.Text" xml:space="preserve">
    <value>User</value>
    <comment>Settings section title for User</comment>
  </data>
  <data name="Settings_NoUserLoggedIn.Text" xml:space="preserve">
    <value>There is no user logged in, please click "Log In" to log in.</value>
    <comment>Settings NoUserLoggedIn content</comment>
  </data>
  <data name="Settings_LogIn.Content" xml:space="preserve">
    <value>Log in</value>
    <comment>Settings LogIn user content</comment>
  </data>
  <data name="Settings_LogOut.Content" xml:space="preserve">
    <value>Log out</value>
    <comment>Settings LogOut user content</comment>
  </data>
  <data name="Shell_LoginButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
    <value>Log in</value>
    <comment>Shell LogIn button automation name property</comment>
  </data>
  <data name="Shell_UserInfoButton.[using:Windows.UI.Xaml.Automation]AutomationProperties.Name" xml:space="preserve">
    <value>User info</value>
    <comment>Shell UserInfo button automation name property</comment>
  </data>
  <data name="Shell_LoginButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>Log in</value>
    <comment>Shell LogIn button tooltip property</comment>
  </data>
  <data name="Shell_UserInfoButton.[using:Windows.UI.Xaml.Controls]ToolTipService.ToolTip" xml:space="preserve">
    <value>User info</value>
    <comment>Shell UserInfo button tooltip property</comment>
  </data>
  <data name="Shell_LogIn.Text" xml:space="preserve">
    <value>Log in</value>
  </data>
  <data name="Shell_LogOut.Content" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="Shell_Guid.Content" xml:space="preserve">
    <value>Guid</value>
    <comment>Navigation view item name for Guid</comment>
  </data>
  <data name="Shell_Xaml.Content" xml:space="preserve">
    <value>Xaml</value>
    <comment>Navigation view item name for Xaml</comment>
  </data>
  <data name="Shell_Command.Content" xml:space="preserve">
    <value>Command</value>
    <comment>Navigation view item name for Command</comment>
  </data>
  <data name="Shell_Blogs.Content" xml:space="preserve">
    <value>Blogs</value>
    <comment>Navigation view item name for Blogs</comment>
  </data>
</root>
